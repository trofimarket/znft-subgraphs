// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CreateMerchant extends ethereum.Event {
  get params(): CreateMerchant__Params {
    return new CreateMerchant__Params(this);
  }
}

export class CreateMerchant__Params {
  _event: CreateMerchant;

  constructor(event: CreateMerchant) {
    this._event = event;
  }

  get hash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get merchant(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get listingFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get platformTax(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get proposalId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Vote extends ethereum.Event {
  get params(): Vote__Params {
    return new Vote__Params(this);
  }
}

export class Vote__Params {
  _event: Vote;

  constructor(event: Vote) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get voter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get znftShares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DAO__proposalResult {
  value0: string;
  value1: Address;
  value2: BigInt;
  value3: boolean;

  constructor(
    value0: string,
    value1: Address,
    value2: BigInt,
    value3: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }
}

export class DAO extends ethereum.SmartContract {
  static bind(address: Address): DAO {
    return new DAO("DAO", address);
  }

  createMerchant(hash: string, listingFee: BigInt, platformTax: i32): boolean {
    let result = super.call(
      "createMerchant",
      "createMerchant(string,uint256,uint8):(bool)",
      [
        ethereum.Value.fromString(hash),
        ethereum.Value.fromUnsignedBigInt(listingFee),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(platformTax))
      ]
    );

    return result[0].toBoolean();
  }

  try_createMerchant(
    hash: string,
    listingFee: BigInt,
    platformTax: i32
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "createMerchant",
      "createMerchant(string,uint256,uint8):(bool)",
      [
        ethereum.Value.fromString(hash),
        ethereum.Value.fromUnsignedBigInt(listingFee),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(platformTax))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isMerchant(_merchantAddress: Address): boolean {
    let result = super.call("isMerchant", "isMerchant(address):(bool)", [
      ethereum.Value.fromAddress(_merchantAddress)
    ]);

    return result[0].toBoolean();
  }

  try_isMerchant(_merchantAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isMerchant", "isMerchant(address):(bool)", [
      ethereum.Value.fromAddress(_merchantAddress)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proposal(proposalId: BigInt): DAO__proposalResult {
    let result = super.call(
      "proposal",
      "proposal(uint256):(string,address,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );

    return new DAO__proposalResult(
      result[0].toString(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_proposal(proposalId: BigInt): ethereum.CallResult<DAO__proposalResult> {
    let result = super.tryCall(
      "proposal",
      "proposal(uint256):(string,address,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DAO__proposalResult(
        value[0].toString(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  totalMerchants(): BigInt {
    let result = super.call("totalMerchants", "totalMerchants():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalMerchants(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalMerchants",
      "totalMerchants():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalProposals(): BigInt {
    let result = super.call("totalProposals", "totalProposals():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalProposals(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalProposals",
      "totalProposals():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateTokenContract(_newTokenContract: Address): boolean {
    let result = super.call(
      "updateTokenContract",
      "updateTokenContract(address):(bool)",
      [ethereum.Value.fromAddress(_newTokenContract)]
    );

    return result[0].toBoolean();
  }

  try_updateTokenContract(
    _newTokenContract: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateTokenContract",
      "updateTokenContract(address):(bool)",
      [ethereum.Value.fromAddress(_newTokenContract)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  vote(proposalId: BigInt): boolean {
    let result = super.call("vote", "vote(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(proposalId)
    ]);

    return result[0].toBoolean();
  }

  try_vote(proposalId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("vote", "vote(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(proposalId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _tokenContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateMerchantCall extends ethereum.Call {
  get inputs(): CreateMerchantCall__Inputs {
    return new CreateMerchantCall__Inputs(this);
  }

  get outputs(): CreateMerchantCall__Outputs {
    return new CreateMerchantCall__Outputs(this);
  }
}

export class CreateMerchantCall__Inputs {
  _call: CreateMerchantCall;

  constructor(call: CreateMerchantCall) {
    this._call = call;
  }

  get hash(): string {
    return this._call.inputValues[0].value.toString();
  }

  get listingFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get platformTax(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class CreateMerchantCall__Outputs {
  _call: CreateMerchantCall;

  constructor(call: CreateMerchantCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateTokenContractCall extends ethereum.Call {
  get inputs(): UpdateTokenContractCall__Inputs {
    return new UpdateTokenContractCall__Inputs(this);
  }

  get outputs(): UpdateTokenContractCall__Outputs {
    return new UpdateTokenContractCall__Outputs(this);
  }
}

export class UpdateTokenContractCall__Inputs {
  _call: UpdateTokenContractCall;

  constructor(call: UpdateTokenContractCall) {
    this._call = call;
  }

  get _newTokenContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateTokenContractCall__Outputs {
  _call: UpdateTokenContractCall;

  constructor(call: UpdateTokenContractCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class VoteCall extends ethereum.Call {
  get inputs(): VoteCall__Inputs {
    return new VoteCall__Inputs(this);
  }

  get outputs(): VoteCall__Outputs {
    return new VoteCall__Outputs(this);
  }
}

export class VoteCall__Inputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class VoteCall__Outputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
