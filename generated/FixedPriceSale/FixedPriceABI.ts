// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BuySale extends ethereum.Event {
  get params(): BuySale__Params {
    return new BuySale__Params(this);
  }
}

export class BuySale__Params {
  _event: BuySale;

  constructor(event: BuySale) {
    this._event = event;
  }

  get saleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CreateSale extends ethereum.Event {
  get params(): CreateSale__Params {
    return new CreateSale__Params(this);
  }
}

export class CreateSale__Params {
  _event: CreateSale;

  constructor(event: CreateSale) {
    this._event = event;
  }

  get saleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FixedPriceABI extends ethereum.SmartContract {
  static bind(address: Address): FixedPriceABI {
    return new FixedPriceABI("FixedPriceABI", address);
  }

  btcPrice(): BigInt {
    let result = super.call("btcPrice", "btcPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_btcPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("btcPrice", "btcPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buySale(_saleId: BigInt, _currency: string): boolean {
    let result = super.call("buySale", "buySale(uint256,string):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_saleId),
      ethereum.Value.fromString(_currency)
    ]);

    return result[0].toBoolean();
  }

  try_buySale(
    _saleId: BigInt,
    _currency: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("buySale", "buySale(uint256,string):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_saleId),
      ethereum.Value.fromString(_currency)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  contractOf(_ticker: string): Address {
    let result = super.call("contractOf", "contractOf(string):(address)", [
      ethereum.Value.fromString(_ticker)
    ]);

    return result[0].toAddress();
  }

  try_contractOf(_ticker: string): ethereum.CallResult<Address> {
    let result = super.tryCall("contractOf", "contractOf(string):(address)", [
      ethereum.Value.fromString(_ticker)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createSale(_tokenId: BigInt, _price: BigInt): boolean {
    let result = super.call(
      "createSale",
      "createSale(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_price)
      ]
    );

    return result[0].toBoolean();
  }

  try_createSale(
    _tokenId: BigInt,
    _price: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "createSale",
      "createSale(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_price)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  daoContract(): Address {
    let result = super.call("daoContract", "daoContract():(address)", []);

    return result[0].toAddress();
  }

  try_daoContract(): ethereum.CallResult<Address> {
    let result = super.tryCall("daoContract", "daoContract():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fetchPrice(_ticker: string): BigInt {
    let result = super.call("fetchPrice", "fetchPrice(string):(uint256)", [
      ethereum.Value.fromString(_ticker)
    ]);

    return result[0].toBigInt();
  }

  try_fetchPrice(_ticker: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fetchPrice", "fetchPrice(string):(uint256)", [
      ethereum.Value.fromString(_ticker)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  markAsStablecoin(_ticker: string): boolean {
    let result = super.call(
      "markAsStablecoin",
      "markAsStablecoin(string):(bool)",
      [ethereum.Value.fromString(_ticker)]
    );

    return result[0].toBoolean();
  }

  try_markAsStablecoin(_ticker: string): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "markAsStablecoin",
      "markAsStablecoin(string):(bool)",
      [ethereum.Value.fromString(_ticker)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nftContract(): Address {
    let result = super.call("nftContract", "nftContract():(address)", []);

    return result[0].toAddress();
  }

  try_nftContract(): ethereum.CallResult<Address> {
    let result = super.tryCall("nftContract", "nftContract():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onBEP721Received(
    _operator: Address,
    _from: Address,
    _tokenId: BigInt,
    _data: Bytes
  ): Bytes {
    let result = super.call(
      "onBEP721Received",
      "onBEP721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(_operator),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromBytes(_data)
      ]
    );

    return result[0].toBytes();
  }

  try_onBEP721Received(
    _operator: Address,
    _from: Address,
    _tokenId: BigInt,
    _data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onBEP721Received",
      "onBEP721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(_operator),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromBytes(_data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  replaceContract(_newAddress: Address, _ticker: string): boolean {
    let result = super.call(
      "replaceContract",
      "replaceContract(address,string):(bool)",
      [
        ethereum.Value.fromAddress(_newAddress),
        ethereum.Value.fromString(_ticker)
      ]
    );

    return result[0].toBoolean();
  }

  try_replaceContract(
    _newAddress: Address,
    _ticker: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "replaceContract",
      "replaceContract(address,string):(bool)",
      [
        ethereum.Value.fromAddress(_newAddress),
        ethereum.Value.fromString(_ticker)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  replaceOracle(_newOracle: Address, _ticker: string): boolean {
    let result = super.call(
      "replaceOracle",
      "replaceOracle(address,string):(bool)",
      [
        ethereum.Value.fromAddress(_newOracle),
        ethereum.Value.fromString(_ticker)
      ]
    );

    return result[0].toBoolean();
  }

  try_replaceOracle(
    _newOracle: Address,
    _ticker: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "replaceOracle",
      "replaceOracle(address,string):(bool)",
      [
        ethereum.Value.fromAddress(_newOracle),
        ethereum.Value.fromString(_ticker)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  sAmount(_ticker: string, _btc: BigInt): BigInt {
    let result = super.call("sAmount", "sAmount(string,uint256):(uint256)", [
      ethereum.Value.fromString(_ticker),
      ethereum.Value.fromUnsignedBigInt(_btc)
    ]);

    return result[0].toBigInt();
  }

  try_sAmount(_ticker: string, _btc: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sAmount", "sAmount(string,uint256):(uint256)", [
      ethereum.Value.fromString(_ticker),
      ethereum.Value.fromUnsignedBigInt(_btc)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  setContract(_contractAddress: Address, _ticker: string): boolean {
    let result = super.call(
      "setContract",
      "setContract(address,string):(bool)",
      [
        ethereum.Value.fromAddress(_contractAddress),
        ethereum.Value.fromString(_ticker)
      ]
    );

    return result[0].toBoolean();
  }

  try_setContract(
    _contractAddress: Address,
    _ticker: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setContract",
      "setContract(address,string):(bool)",
      [
        ethereum.Value.fromAddress(_contractAddress),
        ethereum.Value.fromString(_ticker)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setOracle(_oracleAddress: Address, _ticker: string): boolean {
    let result = super.call("setOracle", "setOracle(address,string):(bool)", [
      ethereum.Value.fromAddress(_oracleAddress),
      ethereum.Value.fromString(_ticker)
    ]);

    return result[0].toBoolean();
  }

  try_setOracle(
    _oracleAddress: Address,
    _ticker: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setOracle",
      "setOracle(address,string):(bool)",
      [
        ethereum.Value.fromAddress(_oracleAddress),
        ethereum.Value.fromString(_ticker)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tAmount(_ticker: string, _btc: BigInt): BigInt {
    let result = super.call("tAmount", "tAmount(string,uint256):(uint256)", [
      ethereum.Value.fromString(_ticker),
      ethereum.Value.fromUnsignedBigInt(_btc)
    ]);

    return result[0].toBigInt();
  }

  try_tAmount(_ticker: string, _btc: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tAmount", "tAmount(string,uint256):(uint256)", [
      ethereum.Value.fromString(_ticker),
      ethereum.Value.fromUnsignedBigInt(_btc)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _dao(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuySaleCall extends ethereum.Call {
  get inputs(): BuySaleCall__Inputs {
    return new BuySaleCall__Inputs(this);
  }

  get outputs(): BuySaleCall__Outputs {
    return new BuySaleCall__Outputs(this);
  }
}

export class BuySaleCall__Inputs {
  _call: BuySaleCall;

  constructor(call: BuySaleCall) {
    this._call = call;
  }

  get _saleId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _currency(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class BuySaleCall__Outputs {
  _call: BuySaleCall;

  constructor(call: BuySaleCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CreateSaleCall extends ethereum.Call {
  get inputs(): CreateSaleCall__Inputs {
    return new CreateSaleCall__Inputs(this);
  }

  get outputs(): CreateSaleCall__Outputs {
    return new CreateSaleCall__Outputs(this);
  }
}

export class CreateSaleCall__Inputs {
  _call: CreateSaleCall;

  constructor(call: CreateSaleCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateSaleCall__Outputs {
  _call: CreateSaleCall;

  constructor(call: CreateSaleCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MarkAsStablecoinCall extends ethereum.Call {
  get inputs(): MarkAsStablecoinCall__Inputs {
    return new MarkAsStablecoinCall__Inputs(this);
  }

  get outputs(): MarkAsStablecoinCall__Outputs {
    return new MarkAsStablecoinCall__Outputs(this);
  }
}

export class MarkAsStablecoinCall__Inputs {
  _call: MarkAsStablecoinCall;

  constructor(call: MarkAsStablecoinCall) {
    this._call = call;
  }

  get _ticker(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class MarkAsStablecoinCall__Outputs {
  _call: MarkAsStablecoinCall;

  constructor(call: MarkAsStablecoinCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ReplaceContractCall extends ethereum.Call {
  get inputs(): ReplaceContractCall__Inputs {
    return new ReplaceContractCall__Inputs(this);
  }

  get outputs(): ReplaceContractCall__Outputs {
    return new ReplaceContractCall__Outputs(this);
  }
}

export class ReplaceContractCall__Inputs {
  _call: ReplaceContractCall;

  constructor(call: ReplaceContractCall) {
    this._call = call;
  }

  get _newAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ticker(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ReplaceContractCall__Outputs {
  _call: ReplaceContractCall;

  constructor(call: ReplaceContractCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ReplaceOracleCall extends ethereum.Call {
  get inputs(): ReplaceOracleCall__Inputs {
    return new ReplaceOracleCall__Inputs(this);
  }

  get outputs(): ReplaceOracleCall__Outputs {
    return new ReplaceOracleCall__Outputs(this);
  }
}

export class ReplaceOracleCall__Inputs {
  _call: ReplaceOracleCall;

  constructor(call: ReplaceOracleCall) {
    this._call = call;
  }

  get _newOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ticker(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ReplaceOracleCall__Outputs {
  _call: ReplaceOracleCall;

  constructor(call: ReplaceOracleCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetContractCall extends ethereum.Call {
  get inputs(): SetContractCall__Inputs {
    return new SetContractCall__Inputs(this);
  }

  get outputs(): SetContractCall__Outputs {
    return new SetContractCall__Outputs(this);
  }
}

export class SetContractCall__Inputs {
  _call: SetContractCall;

  constructor(call: SetContractCall) {
    this._call = call;
  }

  get _contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ticker(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetContractCall__Outputs {
  _call: SetContractCall;

  constructor(call: SetContractCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetOracleCall extends ethereum.Call {
  get inputs(): SetOracleCall__Inputs {
    return new SetOracleCall__Inputs(this);
  }

  get outputs(): SetOracleCall__Outputs {
    return new SetOracleCall__Outputs(this);
  }
}

export class SetOracleCall__Inputs {
  _call: SetOracleCall;

  constructor(call: SetOracleCall) {
    this._call = call;
  }

  get _oracleAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ticker(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetOracleCall__Outputs {
  _call: SetOracleCall;

  constructor(call: SetOracleCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
